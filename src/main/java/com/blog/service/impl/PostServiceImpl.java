package com.blog.service.impl;

import com.blog.entity.Post;
import com.blog.exception.ResourceNotFoundException;
import com.blog.payload.PostDTO;
import com.blog.payload.PostResponse;
import com.blog.repository.PostRepository;
import com.blog.service.PostService;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class PostServiceImpl implements PostService {
    private final PostRepository postRepository;

    private final ModelMapper modelMapper;

    public PostServiceImpl(PostRepository postRepository, ModelMapper modelMapper) {
        this.postRepository = postRepository;
        this.modelMapper = modelMapper;
    }

    @Override
    public PostDTO createPost(PostDTO postDTO) {
        /*Convert DTO to Entity*/
        Post newPost = mapToPost(postDTO);
        Post savedPost = this.postRepository.save(newPost);
        log.info("Saved post Id: {}", savedPost.getId());
        /*Convert savedPost to DTO (which will contain ID generated by the persistence layer*/
        return mapToDTO(savedPost);
    }

    @Override
    public PostResponse getAllPosts(int pageNo, int pageSize,String sortBy, String sortDir) {
        /*Adding support for pagination. Create a sort instance to add support for sorting*/
        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name())
                ? Sort.by(sortBy).ascending()
                : Sort.by(sortBy).descending();
        /*Create a Pageable instance*/
        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);
        /*we now use a Page<Post> object to capture pagination metadata
        (like total elements, total pages, etc.). Instead of directly converting
        the result to a list*/
        Page<Post> posts = this.postRepository.findAll(pageable);
        /*Get content from posts*/
        List<Post> paginatedPosts = posts.getContent();
        /*Convert each post to PostDTO*/
        List<PostDTO> paginatedResponse = paginatedPosts
                .stream()
                .map(this::mapToDTO)
                .toList();
        /*Use the Page<Post> object to populate the PostResponse*/
        PostResponse postResponse = new PostResponse();
        postResponse.setContent(paginatedResponse);
        postResponse.setPageNo(posts.getNumber());
        postResponse.setPageSize(posts.getSize());
        postResponse.setTotalElements(posts.getTotalElements());
        postResponse.setTotalPages(posts.getTotalPages());
        postResponse.setLast(posts.isLast());
        postResponse.setSortBy(sortBy);
        postResponse.setSortDir(sortDir);

        return postResponse;
    }

    @Override
    public PostDTO updatePost(Long id, PostDTO postDTO) {
        Post existingPost = this.postRepository.findById(id).orElseThrow(() ->
                new ResourceNotFoundException("Post", "Id", id));

        /*Update existingPost fields*/
        existingPost.setDescription(postDTO.getDescription());
        existingPost.setContent(postDTO.getContent());
        existingPost.setTitle(postDTO.getTitle());

        /*Save the edited post to the database*/
        Post updatedPost = this.postRepository.save(existingPost);
        return mapToDTO(updatedPost);
    }

    @Override
    public Optional<PostDTO> getPostById(Long id) {
        return this.postRepository.findById(id).map(this::mapToDTO);
    }

    @Override
    public void deletePost(Long id) {
        Post postToDelete = this.postRepository.findById(id).orElseThrow(() ->
                new ResourceNotFoundException("Post", "Id", id));
        /*Delete Post from the database*/
        this.postRepository.delete(postToDelete);
    }

    /*Convert Entity into DTO*/
    private PostDTO mapToDTO(Post post) {
        return modelMapper.map(post, PostDTO.class);
    }
    private Post mapToPost(PostDTO postDTO) {
        return modelMapper.map(postDTO, Post.class);
    }
}
